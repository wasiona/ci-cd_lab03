pipeline {
    agent any

    environment {
        APP_PORT = BRANCH_NAME == 'main' ? '3000' : '3001'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out the code...'
            }
        }

        stage('Build') {
            steps {
                echo 'Building the project...'
                nodejs(nodeJSInstallationName: 'node') {
                    sh './scripts/build.sh'
                    sh 'npm run build'
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Testing the project...'
                nodejs(nodeJSInstallationName: 'node') {
                    sh './scripts/test.sh'
                }
            }  
        }
      
        stage('Build Docker Image') {
            steps {
                script {
                    def node = 'node' 
                    def branch = env.BRANCH_NAME 
                    def version = 'v1.0'
                    def appPort

                    if(branch == 'main') {
                        appPort = '3000'
                    } else if(branch == 'dev') {
                        appPort = '3001'
                    }

                    dockerImage = docker.build("${node}${branch}:${version} --build-arg APP_PORT=${appPort} .")
                    echo "Docker image ID: ${dockerImage.id}"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                        dockerImage.push("${branch}")
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    sh "docker rm -f app-${branch} || true"
                    echo "Deploying the application on port ${APP_PORT}..."
                    sh "docker run -d --name app-${branch} -p ${APP_PORT}:${APP_PORT} ${dockerImage.id}"
                }
            }
        }
    }
}